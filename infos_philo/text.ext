
-int pthread_join(pthread_t thread, void **retval) //void **retval : This is a "pointer to a pointer" that is used to store the return value of the thread you are joining. 
When a thread function (like your my_turn function) finishes, it can return a value. pthread_join gives you a way to capture that value.
-int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);
*pthread_t *thread : pointer to a pthread_t PID of the thread

*const pthread_attr_t *attr : 
This is a pointer to a thread attributes object (pthread_attr_t). This object allows you to specify custom attributes for the new thread such as its stack size, 
scheduling policy, or whether it should be created in a "detached" state.

How it works:
The Simple Way (and most common): If you pass NULL, as you did in your code, the thread is created with default attributes. This is sufficient for most applications. 
The default attributes create a standard, joinable thread.
The Advanced Way: If you need custom attributes, you would:
Declare a pthread_attr_t variable.
Initialize it with pthread_attr_init().
Set specific attributes using functions like :
------"pthread_attr_setstacksize()" or "pthread_attr_setdetachstate()".
Pass a pointer to this object to pthread_create.
Clean up the attributes object with pthread_attr_destroy() when you're done.

* void *(*start_routine) (void *) /the function start its functionality
What it is: This is the most complex-looking part, but it's just a function pointer. It's the address 
of the function that you want the new thread to execute.

(void *arg) : 
Input: The argument to be passed to the start_routine. Pass NULL if no argument is needed.

exemple ::

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

void *print_message_function(void *ptr)
{
    char *message;
    message = (char *) ptr; // Cast the void* back to a char*
    printf("%s \n", message);
    return NULL;
}

int main()
{
    pthread_t thread1, thread2;
    const char *message1 = "Hello from Thread 1";
    const char *message2 = "Hi from Thread 2";

    // Create thread 1, passing message1 as the argument
    pthread_create(&thread1, NULL, print_message_function, (void*) message1);

    // Create thread 2, passing message2 as the argument
    pthread_create(&thread2, NULL, print_message_function, (void*) message2);

    // Wait for both threads to finish
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    return 0;
}
